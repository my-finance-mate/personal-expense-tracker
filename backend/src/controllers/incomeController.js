const User = require("../models/User");
const xlsx = require("xlsx");
const Income = require("../models/Income");

// Add Income Source
exports.addIncome = async (req, res) => {
    const userId = req.user.id;
  
    try {
      const { icon, source, amount, date } = req.body;
  
      // Validation: Check for missing fields
      if (!source || !amount || !date) {
        return res.status(400).json({ message: "All fields are required" });
      }
  
      const newIncome = new Income({
        userId,
        icon,
        source,
        amount,
        date: new Date(date)
      });
  
      await newIncome.save();
      res.status(200).json(newIncome);
    } catch (error) {
      res.status(500).json({ message: "Server Error" });
    }
  };
  
 // Get All Income Source
 exports.getAllIncome = async (req, res) => {
  const userId = req.user.id;

  try {
    const income = await Income.find({ userId }).sort({ date: -1 });
    res.json(income);
  } catch (error) {
    res.status(500).json({ message: "Server Error" });
  }
};


 // Delete Income Source
 exports.deleteIncome = async (req, res) => {
 
 try {
    await Income.findByIdAndDelete(req.params.id);
    res.json({ message: "Income deleted successfully" });
  } catch (error) {
    res.status(500).json({ message: "Server Error" });
  }
};


 // Download Excel
 exports.downloadIncomeExcel = async (req, res) => {
  const userId = req.user.id;
  try {
    const income = await Income.find({ userId }).sort({ date: -1 });

    // Prepare data for Excel
    const data = income.map((item) => ({
      Source: item.source,
      Amount: item.amount,
      Date: item.date,
    }));

    const wb = xlsx.utils.book_new();
    const ws = xlsx.utils.json_to_sheet(data);
    xlsx.utils.book_append_sheet(wb, ws, "Income");
    xlsx.writeFile(wb, "income_details.xlsx");
    res.download("income_details.xlsx");
  } catch (error) {
    res.status(500).json({ message: "Server Error" });
  }
};


// Download PDF
const PDFDocument = require("pdfkit");
const fs = require("fs");
const path = require("path");

exports.downloadIncomePDF = async (req, res) => {
  const userId = req.user.id;

  try {
    const income = await Income.find({ userId }).sort({ date: -1 });

    const doc = new PDFDocument({ margin: 50 });
    const filePath = path.join(__dirname, "..", "income_report.pdf");

    const writeStream = fs.createWriteStream(filePath);
    doc.pipe(writeStream);

    // ===== Header =====
    doc
      .fontSize(24)
      .fillColor("green")
      .text("EconoMe", { align: "center" })
      .moveDown(0.5);

    doc
      .fontSize(18)
      .fillColor("black")
      .text("Income Report", { align: "center" })
      .moveDown(1);

    // ===== Table Header =====
    doc
      .fontSize(12)
      .text("Source", 60, doc.y, { width: 200, bold: true })
      .text("Amount", 280, doc.y, { width: 100 })
      .text("Date", 400, doc.y, { width: 100 })
      .moveDown(0.5)
      .strokeColor("black")
      .lineWidth(1)
      .moveTo(50, doc.y)
      .lineTo(550, doc.y)
      .stroke();

    // ===== Table Content =====
    let total = 0;
    income.forEach((item) => {
      total += item.amount;

      doc
        .fontSize(11)
        .text(item.source || "â€”", 60, doc.y, { width: 200 })
        .text(`Rs. ${item.amount}`, 280, doc.y, { width: 100 })
        .text(new Date(item.date).toLocaleDateString(), 400, doc.y, {
          width: 100,
        })
        .moveDown(0.3);
    });

    doc.moveDown(1);

    // ===== Total =====
    doc
      .fontSize(12)
      .fillColor("green")
      .text(`Total Income: Rs. ${total}`, { align: "right" });

    // ===== Footer =====
    doc
      .moveDown(2)
      .fontSize(10)
      .fillColor("gray")
      .text("Generated by EconoMe", { align: "center" });

    doc.end();

    // Wait for file to be written and send
    writeStream.on("finish", () => {
      res.download(filePath, "income_report.pdf", (err) => {
        if (err) {
          console.error("Download error:", err);
          res.status(500).json({ message: "Failed to download PDF" });
        }
      });
    });
  } catch (error) {
    console.error("PDF generation failed:", error);
    res.status(500).json({ message: "Server Error" });
  }
};

// Update Income Source
exports.updateIncome = async (req, res) => {
  const userId = req.user.id;
  const incomeId = req.params.id;

  try {
    const { icon, source, amount, date } = req.body;

    // Validation
    if (!source || !amount || !date) {
      return res.status(400).json({ message: "All fields are required" });
    }

    const updatedIncome = await Income.findOneAndUpdate(
      { _id: incomeId, userId }, // Ensure the income belongs to the user
      { icon, source, amount, date: new Date(date) },
      { new: true, runValidators: true }
    );

    if (!updatedIncome) {
      return res.status(404).json({ message: "Income not found or not authorized" });
    }

    res.status(200).json(updatedIncome);
  } catch (error) {
    console.error("Error updating income:", error.message);
    res.status(500).json({ message: "Server Error" });
  }
};


